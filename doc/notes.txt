;; $Id: notes.txt,v 1.1 2008/02/11 13:00:10 alemmens Exp $

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Some random notes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


* UPDATE-PERSISTENT-INSTANCE-FOR-REDEFINED-CLASS & friends.

  What should we do when the class has been redefined more than once
  before an instance is loaded?  Example: an instance of class PERSON
  (with schema version 0) was saved.  Now PERSON is redefined twice,
  and the most recent schema for class PERSON has version number 2.
  Ideally, UPDATE-PERSISTENT-INSTANCE-... would be called twice.  But
  that doesn't work in practice, because we can only allocate an instance
  corresponding to the most recent class definition.

  Suppose that version 0 of the PERSON class had an AGE slot, version 1
  discards the AGE slot and adds a YEAR-OF-BIRTH slot, and version 2
  discards the YEAR-OF-BIRTH slot and adds a BIRTH-DATE slot.  Suppose
  also that there are PERSON instances corresponding to version 0,
  instances of version 1 and instances of version 2.

  When loading instances of version 2, we don't need to do anything special
  because version 2 is the most recent version.  For instances of version 1,
  UPDATE-PERSISTENT-INSTANCE-... will be called with BIRTH-DATE as added
  slot, YEAR-OF-BIRTH as discarded slot and the property list (YEAR-OF-BIRTH
  <year-of-birth>).  For instances of version 0, UPDATE-PERSISTENT-INSTANCE-...
  will be called with BIRTH-DATE as added slot, AGE as discarded slot and
  the property list (AGE <age>).

  So UPDATE-PERSISTENT-INSTANCE-... will be called exactly once, and it
  needs to inspect the lists of added/discarded slots if it wants to handle
  multiple version changes.

  Whenever a schema becomes obsolete, we mark it as obsolete and register
  the names of the slots that were added and the slots that were discarded
  (by the most recent version, compared to this version).


* Handling initargs in LOAD-OBJECT and UPDATE-PERSISTENT-INSTANCE-...
  [2006-09-01]

Actually, initargs are only relevant for slots that have been added by
a class redefinition, so they're only relevant for
UPDATE-PERSISTENT-INSTANCE-...  (This is because objects created by
LOAD-OBJECT are disk versions of object that have once been
initialized by Lisp's normal INITIALIZE-INSTANCE methods, which
already took care of the initargs when the object was created for the
first time.)

Looking at the CLHS description of
UPDATE-INSTANCE-FOR-REDEFINED-CLASS, I think that
UPDATE-PERSISTENT-INSTANCE-... doesn't need to handle initargs at all:

  "The generic function update-instance-for-redefined-class also takes
  any number of initialization arguments. When it is called by the system
  to update an instance whose class has been redefined, no initialization
  arguments are provided."


* Updating in-memory persistent instances when the class definition changes
  [2006-09-02]

We should make sure that those are updated too.  Some possible strategies:

1. Don't do anything special but rely on Lisp's normal
   UPDATE-INSTANCE-FOR-REDEFINED-CLASS mechanism.  Then the programmer
   must write methods for both UPDATE-INSTANCE-...  and
   UPDATE-PERSISTENT-INSTANCE-... .  That seems error prone.

2. Remove all instances of the redefined class from the cache.  Then
   the objects will be loaded from disk again, and U-P-I-F-R-C will be
   called automatically.  This has the disadvantage that all values of
   transient slots will be gone; then again, I'm not sure if transient
   slots make much sense anyway for persistent objects.  CLHS says:
   "Updating such an instance occurs at an implementation-dependent
   time, but no later than the next time a slot of that instance is
   read or written."  Maybe we can also hook into
   SLOT-VALUE-USING-CLASS and (SETF S-V-U-C) to automatically reload
   the object.  Or maybe write an after method on Lisp's
   UPDATE-INSTANCE-FOR-REDEFINED-CLASS that calls
   UPDATE-PERSISTENT-...

3. Forbid it and signal some kind of error.

4. Write default method for Lisp's UPDATE-INSTANCE-FOR-REDEFINED-CLASS
   that marks the object as dirty and calls Rucksack's
   UPDATE-PERSISTENT-INSTANCE-FOR-REDEFINED-CLASS.

Strategy 4 looks like a simple and reasonably clean solution to me.
I'll implement that.

